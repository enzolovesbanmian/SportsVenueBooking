@page "/payments/delete"
@using Microsoft.EntityFrameworkCore
@using SportsVenueBooking.Domain
@inject IDbContextFactory<SportsVenueBooking.Data.SportsVenueBookingContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Payment</h2>
    <hr />
    @if (payment is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">BookingId</dt>
            <dd class="col-sm-10">@payment.BookingId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@payment.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsApproved</dt>
            <dd class="col-sm-10">@payment.IsApproved</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PaymentDate</dt>
            <dd class="col-sm-10">@payment.PaymentDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@payment.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@payment.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Createdby</dt>
            <dd class="col-sm-10">@payment.Createdby</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Updatedby</dt>
            <dd class="col-sm-10">@payment.Updatedby</dd>
        </dl>
        <EditForm method="post" Model="payment" OnValidSubmit="DeletePayment" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(payment is null)">Delete</button> |
            <a href="/payments">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Payment? payment;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        payment = await context.Payment.FirstOrDefaultAsync(m => m.Id == Id);

        if (payment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePayment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Payment.Remove(payment!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/payments");
    }
}
